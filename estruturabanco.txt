-- Estrutura do Banco de Dados Maguinho --

-- SQL Definition of users
create table public.users (
  id uuid not null default gen_random_uuid (),
  name text not null,
  email text not null,
  cpf text not null,
  phone text not null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  email_verified boolean not null default false,
  constraint users_pkey primary key (id),
  constraint users_cpf_key unique (cpf),
  constraint users_email_key unique (email),
  constraint users_phone_key unique (phone)
) TABLESPACE pg_default;

create trigger update_users_timestamp BEFORE
update on users for EACH row
execute FUNCTION update_timestamp ();

-- SQL Definition of whatsapp_messages
create table public.whatsapp_messages (
  id uuid not null default gen_random_uuid (),
  user_id uuid not null,
  whatsapp_number text not null,
  message_content text not null,
  is_from_user boolean not null,
  created_at timestamp with time zone not null default now(),
  constraint whatsapp_messages_pkey primary key (id),
  constraint whatsapp_messages_user_id_fkey foreign KEY (user_id) references users (id) on delete CASCADE
) TABLESPACE pg_default;

create trigger process_financial_messages
after INSERT on whatsapp_messages for EACH row
execute FUNCTION supabase_functions.http_request (
  'https://workflows.maguinho.com/webhook-test/process-financial-message',
  'POST',
  '{"Content-type":"application/json"}',
  '{"body":"{\"user_id\": \"{{row.user_id}}\", \"message_content\": \"{{row.message_content}}\", \"whatsapp_number\": \"{{row.whatsapp_number}}\", \"is_from_user\": \"{{row.is_from_user}}\"}"}',
  '5000'
);

-- SQL Definition of whatsapp_chats
create table public.whatsapp_chats (
  id uuid not null default gen_random_uuid (),
  user_id uuid not null,
  whatsapp_number text not null,
  whatsapp_id text null,
  last_interaction timestamp with time zone null,
  is_active boolean not null default true,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  constraint whatsapp_chats_pkey primary key (id),
  constraint whatsapp_chats_user_id_fkey foreign KEY (user_id) references users (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_whatsapp_chats_number on public.whatsapp_chats using btree (whatsapp_number) TABLESPACE pg_default;

create trigger update_whatsapp_chats_timestamp BEFORE
update on whatsapp_chats for EACH row
execute FUNCTION update_timestamp ();

-- SQL Definition of webhook_logs
create table public.webhook_logs (
  id uuid not null default gen_random_uuid (),
  provider text not null,
  event_type text not null,
  payload jsonb not null,
  created_at timestamp with time zone not null default now(),
  constraint webhook_logs_pkey primary key (id)
) TABLESPACE pg_default;

-- SQL Definition of user_settings
create table public.user_settings (
  id uuid not null default gen_random_uuid (),
  user_id uuid not null,
  notification_frequency text not null default 'daily'::text,
  budget_alerts boolean not null default true,
  preferred_report_format text not null default 'text'::text,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  constraint user_settings_pkey primary key (id),
  constraint user_settings_user_id_fkey foreign KEY (user_id) references users (id) on delete CASCADE,
  constraint notification_frequency_check check (
    (
      notification_frequency = any (
        array[
          'daily'::text,
          'weekly'::text,
          'monthly'::text,
          'none'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_user_settings_user_id on public.user_settings using btree (user_id) TABLESPACE pg_default;

create trigger update_user_settings_timestamp BEFORE
update on user_settings for EACH row
execute FUNCTION update_timestamp ();

-- SQL Definition of transactions
create table public.transactions (
  id uuid not null default gen_random_uuid (),
  user_id uuid not null,
  amount numeric(10, 2) not null,
  description text not null,
  category_id uuid null,
  transaction_type text not null,
  transaction_date timestamp with time zone not null default now(),
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  constraint transactions_pkey primary key (id),
  constraint transactions_category_id_fkey foreign KEY (category_id) references categories (id) on delete set null,
  constraint transactions_user_id_fkey foreign KEY (user_id) references users (id) on delete CASCADE,
  constraint transactions_type_check check (
    (
      transaction_type = any (array['income'::text, 'expense'::text])
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_transactions_type on public.transactions using btree (transaction_type) TABLESPACE pg_default;

create index IF not exists idx_transactions_user_date on public.transactions using btree (user_id, transaction_date) TABLESPACE pg_default;

create index IF not exists idx_transactions_category on public.transactions using btree (category_id) TABLESPACE pg_default;

create trigger update_transactions_timestamp BEFORE
update on transactions for EACH row
execute FUNCTION update_timestamp ();

-- SQL Definition of subscriptions
create table public.subscriptions (
  id uuid not null default gen_random_uuid (),
  user_id uuid not null,
  plan_id uuid not null,
  status text not null default 'active'::text,
  start_date timestamp with time zone not null default now(),
  end_date timestamp with time zone null,
  coupon_id uuid null,
  gifted_by uuid null,
  override_price numeric(10, 2) null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  constraint subscriptions_pkey primary key (id),
  constraint subscriptions_coupon_id_fkey foreign KEY (coupon_id) references coupons (id) on delete set null,
  constraint subscriptions_gifted_by_fkey foreign KEY (gifted_by) references users (id) on delete set null,
  constraint subscriptions_plan_id_fkey foreign KEY (plan_id) references plans (id) on delete RESTRICT,
  constraint subscriptions_user_id_fkey foreign KEY (user_id) references users (id) on delete CASCADE
) TABLESPACE pg_default;

create trigger update_subscriptions_timestamp BEFORE
update on subscriptions for EACH row
execute FUNCTION update_timestamp ();

-- SQL Definition of plans
create table public.plans (
  id uuid not null default gen_random_uuid (),
  name text not null,
  price numeric(10, 2) not null,
  currency text not null default 'BRL'::text,
  billing_interval text not null,
  description text null,
  active boolean not null default true,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  constraint plans_pkey primary key (id),
  constraint plans_billing_interval_check check (
    (
      billing_interval = any (
        array['mensal'::text, 'trimestral'::text, 'anual'::text]
      )
    )
  )
) TABLESPACE pg_default;

create trigger update_plans_timestamp BEFORE
update on plans for EACH row
execute FUNCTION update_timestamp ();

-- SQL Definition of payments
create table public.payments (
  id uuid not null default gen_random_uuid (),
  user_id uuid not null,
  subscription_id uuid null,
  amount numeric(10, 2) not null,
  currency text not null default 'BRL'::text,
  payment_method text null,
  transaction_id text null,
  status text not null default 'pending'::text,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  constraint payments_pkey primary key (id),
  constraint payments_subscription_id_fkey foreign KEY (subscription_id) references subscriptions (id) on delete set null,
  constraint payments_user_id_fkey foreign KEY (user_id) references users (id) on delete CASCADE
) TABLESPACE pg_default;

create trigger update_payments_timestamp BEFORE
update on payments for EACH row
execute FUNCTION update_timestamp ();

-- SQL Definition of financial_logs
create table public.financial_logs (
  id uuid not null default gen_random_uuid (),
  user_id uuid null,
  action text not null,
  description text null,
  data jsonb null,
  created_at timestamp with time zone not null default now(),
  constraint financial_logs_pkey primary key (id),
  constraint financial_logs_user_id_fkey foreign KEY (user_id) references users (id) on delete CASCADE
) TABLESPACE pg_default;

-- SQL Definition of coupons
create table public.coupons (
  id uuid not null default gen_random_uuid (),
  code text not null,
  discount_type text not null,
  discount_value numeric(10, 2) not null default 0,
  usage_limit integer not null default 1,
  usage_count integer not null default 0,
  expires_at timestamp with time zone null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  constraint coupons_pkey primary key (id),
  constraint coupons_code_key unique (code),
  constraint coupons_discount_type_check check (
    (
      discount_type = any (array['percent'::text, 'fixed'::text])
    )
  )
) TABLESPACE pg_default;

create trigger update_coupons_timestamp BEFORE
update on coupons for EACH row
execute FUNCTION update_timestamp ();

-- SQL Definition of coupon_usages
create table public.coupon_usages (
  id uuid not null default gen_random_uuid (),
  coupon_id uuid not null,
  user_id uuid not null,
  used_at timestamp with time zone not null default now(),
  constraint coupon_usages_pkey primary key (id),
  constraint coupon_usages_coupon_id_fkey foreign KEY (coupon_id) references coupons (id) on delete CASCADE,
  constraint coupon_usages_user_id_fkey foreign KEY (user_id) references users (id) on delete CASCADE
) TABLESPACE pg_default;

-- SQL Definition of categories
create table public.categories (
  id uuid not null default gen_random_uuid (),
  name text not null,
  type text not null,
  icon text null,
  synonyms text[] null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  constraint categories_pkey primary key (id),
  constraint categories_type_check check (
    (
      type = any (array['income'::text, 'expense'::text])
    )
  )
) TABLESPACE pg_default;

create trigger update_categories_timestamp BEFORE
update on categories for EACH row
execute FUNCTION update_timestamp ();

-- Função para atualizar o campo updated_at automaticamente
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Tabela payment_attempts
CREATE TABLE IF NOT EXISTS payment_attempts (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  preference_id TEXT NOT NULL,
  plan_id TEXT NOT NULL,
  plan_name TEXT NOT NULL,
  plan_price DECIMAL(10, 2) NOT NULL,
  plan_interval TEXT NOT NULL,
  status TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Índices para melhorar a performance
CREATE INDEX IF NOT EXISTS idx_payment_attempts_user_id ON payment_attempts(user_id);
CREATE INDEX IF NOT EXISTS idx_payment_attempts_status ON payment_attempts(status);

-- Permissões RLS (Row Level Security)
ALTER TABLE payment_attempts ENABLE ROW LEVEL SECURITY;

-- Políticas para payment_attempts
CREATE POLICY "Usuários podem ver suas próprias tentativas de pagamento"
  ON payment_attempts FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Service pode inserir tentativas de pagamento"
  ON payment_attempts FOR INSERT
  WITH CHECK (true);

CREATE POLICY "Service pode atualizar tentativas de pagamento"
  ON payment_attempts FOR UPDATE
  USING (true);

-- Exemplos de dados nas tabelas
-- Exemplo de usuário
-- {
--   "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
--   "name": "João Silva",
--   "email": "joao.silva@example.com",
--   "cpf": "123.456.789-00",
--   "phone": "+5511987654321",
--   "created_at": "2025-01-15T10:30:00Z",
--   "updated_at": "2025-01-15T10:30:00Z",
--   "email_verified": true
-- }

-- Exemplo de plano
-- {
--   "id": "p1a2b3c4-d5e6-7890-abcd-ef1234567890",
--   "name": "Plano Premium",
--   "price": 29.90,
--   "currency": "BRL",
--   "billing_interval": "mensal",
--   "description": "Acesso a todas as funcionalidades premium",
--   "active": true,
--   "created_at": "2025-01-10T08:00:00Z",
--   "updated_at": "2025-01-10T08:00:00Z"
-- }

-- Exemplo de assinatura
-- {
--   "id": "s1a2b3c4-d5e6-7890-abcd-ef1234567890",
--   "user_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
--   "plan_id": "p1a2b3c4-d5e6-7890-abcd-ef1234567890",
--   "status": "active",
--   "start_date": "2025-02-01T00:00:00Z",
--   "end_date": "2026-02-01T00:00:00Z",
--   "coupon_id": null,
--   "gifted_by": null,
--   "override_price": null,
--   "created_at": "2025-02-01T00:00:00Z",
--   "updated_at": "2025-02-01T00:00:00Z"
-- }

-- Exemplo de pagamento
-- {
--   "id": "py1a2b3c4-d5e6-7890-abcd-ef1234567890",
--   "user_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
--   "subscription_id": "s1a2b3c4-d5e6-7890-abcd-ef1234567890",
--   "amount": 29.90,
--   "currency": "BRL",
--   "payment_method": "credit_card",
--   "transaction_id": "mp_12345678",
--   "status": "approved",
--   "created_at": "2025-02-01T00:00:00Z",
--   "updated_at": "2025-02-01T00:00:00Z"
-- }
